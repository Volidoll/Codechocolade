def func1(arg1, arg2):
    var17 = func2(arg1, arg2)
    var18 = func11()
    var19 = (537 | arg1) | 465 & var17
    var20 = var19 ^ arg2
    result = (var18 & var20 ^ var20) | var20 | -114 & arg2
    return result
def func11():
    func9()
    result = len(xrange(13))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 6
def func4(arg5, arg6):
    if arg6 < arg6:
        var11 = class5()
    else:
        var11 = class7()
    for var12 in (arg5 + arg5 - 5 for i in [(i & arg5) & 5 for i in xrange(4)]):
        var13 = var11.func6
        var13(arg5, var12)
    var14 = 195 & arg6 + ((-879 ^ (((arg5 & (arg6 + (arg6 - ((arg6 + arg5) + arg5 ^ arg5) & (arg5 | arg5) | (-1607748326 + -46)) + 1107707700) + -355) - -487) - -884) + arg5) & 865 ^ arg6) ^ arg5
    var15 = arg6 ^ (arg6 + (var14 - (((((((var14 - 196) | (302 | (var14 - ((arg5 - var14) & ((-890 & var14) + -2079702976)) + arg6 + -1764362348) ^ arg5)) | var14) + arg5) & 74986627) + var14) ^ var14)) + var14) ^ -562
    result = var15 - arg5
    return result
class class7(object):
    def func6(self, arg9, arg10):
        return 0
class class5(class7):
    def func6(self, arg7, arg8):
        return 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var16 = func4(rest, 0)
        if acc == 0:
            return var16
        else:
            result = func3(acc - 1, var16)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 21'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
